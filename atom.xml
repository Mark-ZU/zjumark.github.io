<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mark&#39;s Page</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zjumark.github.io/"/>
  <updated>2018-11-25T15:22:27.017Z</updated>
  <id>http://zjumark.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QtQuick(Qml)中的Model使用</title>
    <link href="http://zjumark.github.io/2018/11/25/QtQuick-Qml-%E4%B8%AD%E7%9A%84Model%E4%BD%BF%E7%94%A8/"/>
    <id>http://zjumark.github.io/2018/11/25/QtQuick-Qml-中的Model使用/</id>
    <published>2018-11-25T15:20:02.000Z</published>
    <updated>2018-11-25T15:22:27.017Z</updated>
    
    <content type="html"><![CDATA[<p>在Qml使用中，会遇到使用<code>Repeater</code>或者<code>ListView</code>之类的东西，如果这些需要展示的数据在c++层面，数据的频繁更新或者数据的惰性更新会需要使用到<code>Model</code>。</p><p>与<code>Model</code>对应一起使用的是<code>Delegate</code>，分别代表的是数据原型以及显示方式，这非常符合MVC。(<a href="http://doc-snapshots.qt.io/qt5-5.11/qtquick-modelviewsdata-modelview.html" target="_blank" rel="noopener">相关概念及使用样例</a>)</p><p>在Qml中，更复杂的<code>Model</code>需要有c++ class来书写，本文提供一种方便与c++数据进行交互的方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Global</span> :</span> <span class="keyword">public</span> QObject&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">widthChanged</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Singleton&lt;Global&gt; G;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataModel</span> :</span> <span class="keyword">public</span> QAbstractListModel&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">widthChanged</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; <span class="function">emit <span class="title">dataChanged</span><span class="params">(createIndex(i,<span class="number">0</span>),createIndex(i,<span class="number">0</span>))</span></span>; &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">DataModel</span><span class="params">(QObject *parent = Q_NULLPTR)</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~DataModel()&#123;&#125;</span><br><span class="line">    <span class="keyword">enum</span> Roles &#123; WidthRole = Qt::UserRole + <span class="number">1</span> &#125;;</span><br><span class="line">    Q_ENUM(Roles)</span><br><span class="line">    QHash&lt;<span class="keyword">int</span>, QByteArray&gt; roleNames() <span class="keyword">const</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">rowCount</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">columnCount</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QVariant <span class="title">data</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">int</span> role = Qt::DisplayRole)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上代码是一个Model的Demo样例，值得注意的是三个重载的函数<code>rowCount</code>、<code>columnCount</code>以及<code>data</code>和一个信号<code>dataChanged</code>，这三个函数是由Qml进行调用，获取Model的行列值以及获取特定位置的值的，而在行列值不变的情况下，需要更新数据只需要触发<code>dataChanged</code>信号即可。若出现了行列值改变的情况，则需要进行重新渲染，流程如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span></span>&#123;</span><br><span class="line">    beginResetModel();</span><br><span class="line">    ...</span><br><span class="line">    endResetModel();</span><br><span class="line">    <span class="keyword">this</span>-&gt;resetInternalData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api函数均可以通过Qt Reference找到，这里就不详细解释了。</p><p><a href="https://github.com/ZJUMark/MarkPlayground/tree/master/QtModelDemo" target="_blank" rel="noopener">完整Demo地址</a></p><p><img src="1543159049742.png" alt="1543159049742"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Qml使用中，会遇到使用&lt;code&gt;Repeater&lt;/code&gt;或者&lt;code&gt;ListView&lt;/code&gt;之类的东西，如果这些需要展示的数据在c++层面，数据的频繁更新或者数据的惰性更新会需要使用到&lt;code&gt;Model&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;与&lt;code&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zjumark.github.io/2018/11/15/hello-world/"/>
    <id>http://zjumark.github.io/2018/11/15/hello-world/</id>
    <published>2018-11-14T17:02:16.088Z</published>
    <updated>2018-11-14T17:02:16.088Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下的alfred替代软件以及有道词典插件</title>
    <link href="http://zjumark.github.io/2018/11/15/Ubuntu%E4%B8%8B%E7%9A%84alfred%E6%9B%BF%E4%BB%A3%E8%BD%AF%E4%BB%B6%E4%BB%A5%E5%8F%8A%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8%E6%8F%92%E4%BB%B6/"/>
    <id>http://zjumark.github.io/2018/11/15/Ubuntu下的alfred替代软件以及有道词典插件/</id>
    <published>2018-11-14T17:00:23.000Z</published>
    <updated>2018-11-14T17:18:51.738Z</updated>
    
    <content type="html"><![CDATA[<p>习惯于Mac下alfred的使用后，换成Ubuntu或者Windows会时常想起这个快捷好用的软件，平常的计算器，应用搜索，甚至于查询天气，查字典，查api等都很顺手。在Windows下，可以使用Wox进行替代，在Ubuntu下可以使用Albert进行替代。</p><p>但是由于使用人数不是很多，插件不是非常完备，于是尝试从alfred抄过来一个查有道词典的插件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""Translate text using Youdao Translate API.</span></span><br><span class="line"><span class="string">Usage: yd &lt;text&gt;</span></span><br><span class="line"><span class="string">Example: yd hello</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> albertv0 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> locale</span><br><span class="line"></span><br><span class="line">__iid__ = <span class="string">"PythonInterface/v0.1"</span></span><br><span class="line">__prettyname__ = <span class="string">"Youdao Translate"</span></span><br><span class="line">__version__ = <span class="string">"0.1"</span></span><br><span class="line">__trigger__ = <span class="string">"yd "</span>  <span class="comment"># 触发命令</span></span><br><span class="line">__author__ = <span class="string">"mark"</span></span><br><span class="line">__dependencies__ = []</span><br><span class="line"></span><br><span class="line">ua = <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36"</span></span><br><span class="line">urltmpl = <span class="string">"http://fanyi.youdao.com/openapi.do?keyfrom=SeekBetterMe&amp;key=164530784&amp;type=data&amp;doctype=json&amp;version=1.1&amp;q=%s"</span></span><br><span class="line"></span><br><span class="line">iconPath = iconLookup(<span class="string">'config-language'</span>)  <span class="comment"># 自定义图标</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> iconPath:</span><br><span class="line">    iconPath = <span class="string">":python_module"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleQuery</span><span class="params">(query)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> query.isTriggered:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getItem</span><span class="params">(text, subtext=<span class="string">''</span>)</span>:</span>  <span class="comment"># 显示的项</span></span><br><span class="line">            item = Item(</span><br><span class="line">                id=__prettyname__, </span><br><span class="line">                icon=iconPath, </span><br><span class="line">                completion=query.rawString,</span><br><span class="line">                text=text, </span><br><span class="line">                subtext=subtext</span><br><span class="line">            )</span><br><span class="line">            item.addAction(ClipAction(<span class="string">"Copy translation to clipboard"</span>, text))  <span class="comment"># 项支持的操作</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        txt = query.string.strip()</span><br><span class="line">        <span class="keyword">if</span> txt:</span><br><span class="line">            url = urltmpl % ( urllib.parse.quote_plus(txt) )</span><br><span class="line">            req = urllib.request.Request(url, headers=&#123;<span class="string">'User-Agent'</span>: ua&#125;)</span><br><span class="line">            <span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> response:</span><br><span class="line">                items = []  <span class="comment"># 待返回的列表</span></span><br><span class="line">                data = json.load(response)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'basic'</span> <span class="keyword">in</span> data:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'phonetic'</span> <span class="keyword">in</span> data[<span class="string">'basic'</span>]:  <span class="comment"># 读音</span></span><br><span class="line">                        items.append(getItem(<span class="string">'/'</span> + data[<span class="string">'basic'</span>][<span class="string">'phonetic'</span>] + <span class="string">'/'</span>))</span><br><span class="line">                    <span class="keyword">for</span> exp <span class="keyword">in</span> data[<span class="string">'basic'</span>][<span class="string">'explains'</span>]:  <span class="comment"># 释义</span></span><br><span class="line">                        items.append(getItem(exp, <span class="string">'basic'</span>))</span><br><span class="line">                <span class="keyword">elif</span> <span class="string">'translation'</span> <span class="keyword">in</span> data:  <span class="comment"># 句子翻译</span></span><br><span class="line">                    items.append(getItem(data[<span class="string">'translation'</span>][<span class="number">0</span>], <span class="string">'translation'</span>))</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'web'</span> <span class="keyword">in</span> data:  <span class="comment"># 网络释义</span></span><br><span class="line">                    <span class="keyword">for</span> w <span class="keyword">in</span> data[<span class="string">'web'</span>]:</span><br><span class="line">                        value = list(set(w[<span class="string">'value'</span>]))  <span class="comment"># 去重</span></span><br><span class="line">                        items.append(getItem(w[<span class="string">'key'</span>]+<span class="string">': '</span>+<span class="string">'; '</span>.join(value[:<span class="number">2</span>]), <span class="string">'web'</span>))</span><br><span class="line">                <span class="keyword">return</span> items</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> getItem(<span class="string">"Enter a translation query"</span>)</span><br></pre></td></tr></table></figure><p>由于之前在Mac下是直接使用写好的插件的，没有看过代码，这次查看了一下发现，使用了某位大佬之前注册的youdao/openapi的账号，目前这个账号已经停止注册并且使用有道智云代替，相当于已经没有免费的查询接口了（当然自己写爬虫也是没有问题的）。简单起见，依旧使用了某位大佬的账号（侵删<a href="mailto:hzypp@sina.cn" target="_blank" rel="noopener">hzypp@sina.cn</a>)。效果如下，可以查看音标还蛮方便的。</p><p><img src="/images/1542215658805.png" alt="1542215658805"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;习惯于Mac下alfred的使用后，换成Ubuntu或者Windows会时常想起这个快捷好用的软件，平常的计算器，应用搜索，甚至于查询天气，查字典，查api等都很顺手。在Windows下，可以使用Wox进行替代，在Ubuntu下可以使用Albert进行替代。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
